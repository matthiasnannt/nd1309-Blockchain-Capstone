// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require("Verifier");
var proof = require("../zokrates/code/square/proof.json");

contract("Test SquareVerifier", () => {
  beforeEach(async function () {
    this.contract = await Verifier.deployed();
  });

  describe("test squareVerifier", function () {
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps

    it("should be correct proof", async function () {
      let res = await this.contract.verifyTx.call(
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        proof.inputs
      );
      assert(res, "proof was not accepted but should be correct");
    });

    // Test verification with incorrect proof
    it("should be incorrect proof", async function () {
      const fakeProof = {
        proof: {
          a: [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
          ],
          b: [
            [
              "0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000000000",
            ],
            [
              "0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x0000000000000000000000000000000000000000000000000000000000000000",
            ],
          ],
          c: [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
          ],
        },
        inputs: [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
        ],
      };
      let res = await this.contract.verifyTx.call(
        fakeProof.proof.a,
        fakeProof.proof.b,
        fakeProof.proof.c,
        fakeProof.inputs
      );
      assert(!res, "proof was accepted but should be incorrect");
    });
  });
});
