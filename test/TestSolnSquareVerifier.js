// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SolnSquareVerifier = artifacts.require("SolnSquareVerifier");
var proof = require("../zokrates/code/square/proof.json");
var web3 = require("web3");

contract("Test SolnSquareVerifier", (accounts) => {
  beforeEach(async function () {
    this.contract = await SolnSquareVerifier.deployed();
  });

  describe("test SolnSquareVerifier", function () {
    // Test if a new solution can be added for contract - SolnSquareVerifier
    it("should test if a new solution can be added", async function () {
      const res = await this.contract.addSolution.call(
        0,
        accounts[1],
        web3.utils.fromUtf8("0")
      );
      assert.equal(res, true, "Function didn't return");
    });

    // Test if an ERC721 token can be minted for contract - SolnSquareVerifier
    it("should test if an ERC721 token can be minted", async function () {
      const res = await this.contract.mintNFT.call(
        accounts[1],
        0,
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        proof.inputs
      );
      assert.equal(res, true, "Function didn't return");
    });
  });
});
